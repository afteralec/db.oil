name: Create Deploy Request
on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/migrate.yaml"
      - "migrations/*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-cd-database:
    name: Create CD Database
    runs-on: ubuntu-latest

    steps:
      - name: Create branch
        uses: planetscale/create-branch-action@v4
        id: create_branch
        with:
          org_name: petrichormud
          database_name: main
          branch_name: cd
          from: main
          wait: true
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      - name: Create password
        uses: planetscale/create-branch-password-action@v3
        id: create_password
        with:
          org_name: petrichormud
          database_name: main
          branch_name: cd
          name: cd-migrate
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup SQLX
        run: cargo install sqlx-cli
      - name: Apply Migrations
        run: |
          sqlx migrate run -D "mysql://$DB_USERNAME:$DB_PASSWORD@$DB_HOSTNAME/$DB_NAME?tls=true"
        env:
          DB_NAME: main
          DB_USERNAME: ${{ steps.create_password.outputs.username }}
          DB_PASSWORD: ${{ steps.create_password.outputs.password }}
          DB_HOSTNAME: ${{ steps.create_password.outputs.hostname }}

  app-integration-tests:
    name: App Integration Tests
    needs: create-cd-database
    runs-on: ubuntu-latest

    steps:
      - name: Create password
        uses: planetscale/create-branch-password-action@v3
        id: create_password
        with:
          org_name: petrichormud
          database_name: main
          branch_name: cd
          name: cd-integ-tests-app
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: petrichormud/app
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.x
      - name: Integration Tests
        run: |
          make test-ci
        env:
          DATABASE_URL: "${{ steps.create_password.outputs.username }}:${{ steps.create_password.outputs.password }}@tcp(${{ steps.create_password.outputs.hostname }})/main?tls=true&parseTime=true"

  game-integration-tests:
    name: Game Integration Tests
    needs: create-cd-database
    runs-on: ubuntu-latest

    steps:
      - name: Create password
        uses: planetscale/create-branch-password-action@v3
        id: create_password
        with:
          org_name: petrichormud
          database_name: main
          branch_name: cd
          name: cd-integ-tests-game
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: petrichormud/game

  deploy:
    name: Deploy
    needs: [app-integration-tests, game-integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Create a deploy request
        uses: planetscale/create-deploy-request-action@v1
        id: create_deploy_request
        with:
          org_name: petrichormud
          database_name: main
          branch_name: cd
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      # - name: Deploy the deploy request
      #   uses: planetscale/deploy-deploy-request-action@v1
      #   id: deploy_deploy_request
      #   with:
      #     org_name: petrichormud
      #     database_name: main
      #     number: ${{ steps.create_deploy_request.outputs.number }}
      #     wait: true
      #   env:
      #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
